#!/bin/bash
clear


# handle no file passed
if [ -z "$1" ]
then
  echo please provide a file to process
  echo
  exit
fi

# check if output folder already exists
if [ -d bash_down_and_out ]
then
  read -p "bash_down_and_out output folder exists. overwrite? " yn
  case $yn in
      [Yy]* ) echo okie-dokie;;
      [Nn]* ) exit;;
      * ) echo "Please answer yes or no.";;
  esac
fi

# build the section_no array from the current depth and existing array
get_section_no(){
  length=${#section_no[@]}

  if [ "$length" -lt "$depth" ]
  then
    # add non-existent section segments
    while [ "$length" -lt "$depth" ]
    do
      section_no+=(0)
      length=${#section_no[@]}
    done
  elif [ "$length" -gt "$depth" ]
  then
    # slice off unnecessary segments
    section_no=("${section_no[@]:0:$depth}")
  fi

  # increment last element
  ((section_no[${#section_no[@]} - 1]++))
}

# join array
join_by (){ 
  local IFS="$1"; shift; echo "$*"; 
}

# (re)create output files
rm -rf bash_down_and_out
mkdir bash_down_and_out
mkdir bash_down_and_out/scripts
mkdir bash_down_and_out/tests

# vars for loop
filename=$1
bin_dir="$(dirname $(realpath $0))"
cur_script=""
script_no=0
heading=""
heading_path=""
section_no=()
depth=0

# iterate through lines in file and decide how to parse/output them
while read -r line
do
  # run through parser if we have a local path after #!
  if [ ! -z "$(echo $line | grep -e '^[ ]*#![^ /].*$')" ]
  then
    script="$(echo $line | sed 's/^[ ]*#!//' | sed 's/ .*$//')"
    cmd="$(echo $line | sed 's/^[ ]*#![^ ]*//')"
    output=`"$bin_dir/../src/parsers/$script" "$heading" "$heading_path" "$cmd"`
    cat <<< "$output" >> "./bash_down_and_out/tests/$script"

  # start writing temp script if we have #!
  elif [ ! -z "$(echo $line | grep -e '^[ ]*#![/]*.*$')" ]
  then
    # default to using bash
    if [ "$line" = '#!' ]
    then
      hash_bang='#!/bin/bash'
    else
      hash_bang="$line"
    fi

    cur_script="./bash_down_and_out/scripts/$script_no"_"$heading_path"
    echo "$hash_bang" > "$cur_script"

  # execute and clear cur script if we get !#
  elif [ ! -z "$(echo $line | grep -e '^[ ]*!#$')" ]
  then
    if [ ! -z "$cur_script" ]
    then
      chmod +x $cur_script
      $cur_script
      cur_script=""
      ((script_no++))
    fi

  # write to current script if we have one
  elif [ ! -z "$cur_script" ]
  then
    echo $line >> "$cur_script"

  # generate section number and write to markdown
  elif [ ! -z "$(echo $line | grep -e '^#')" ]
  then
    hashes="$(echo $line | sed s/[^#].*$//)"
    heading="$(echo $line | sed s/^[#]*//)"
    heading_path="$(echo $heading | sed -E 's/[^_a-zA-Z0-9]+/-/g')"
    depth=${#hashes}
    get_section_no
    section=$(join_by . "${section_no[@]}")
    echo "$hashes$section $heading" >> bash_down_and_out/spec.md

  # just write to markdown
  else
    echo $line >> bash_down_and_out/spec.md
  fi

  # if it starts with #!/some_shell write and run a script with all lines until !# on its own line unless there is a one line command on the same line
  # if it starts with #!some_local_path parse the line with a script in the bin folder
  # if it is the !# then clear out cur_script
done < "$filename"

# then execute the runners

output=`"$bin_dir/../src/runners/client" ./bash_down_and_out/tests/client`
cat<<<"$output"
